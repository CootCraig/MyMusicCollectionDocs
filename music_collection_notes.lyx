#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
MyMusicCollection - Portfolio Rails 2.3.10 Application
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Git and Heroku
\end_layout

\begin_layout Subsection
Git
\end_layout

\begin_layout Subsubsection
Rails application
\end_layout

\begin_layout Paragraph
~/dev/music_collection/MyMusicCollection
\end_layout

\begin_layout LyX-Code
git remote add origin git@github.com:CootCraig/MyMusicCollection.git
\end_layout

\begin_layout LyX-Code
git push origin master
\end_layout

\begin_layout Paragraph
~/dev/music_collection/docs
\end_layout

\begin_layout LyX-Code
git remote add origin git@github.com:CootCraig/MyMusicCollectionDocs.git
\end_layout

\begin_layout LyX-Code
git push origin master
\end_layout

\begin_layout Subsection
Heroku Deployment
\end_layout

\begin_layout Subsubsection
Create the Heroku application
\end_layout

\begin_layout Paragraph
~/dev/music_collection/MyMusicCollection
\end_layout

\begin_layout LyX-Code
gem install heroku
\end_layout

\begin_layout LyX-Code
heroku create MyMusicCollection
\end_layout

\begin_layout LyX-Code
Creating mymusiccollection...
 done
\end_layout

\begin_layout LyX-Code
Created http://mymusiccollection.heroku.com/ | git@heroku.com:mymusiccollection.git
\end_layout

\begin_layout LyX-Code
Git remote heroku added
\end_layout

\begin_layout Paragraph
git push heroku master
\end_layout

\begin_layout LyX-Code
-----> Heroku receiving push
\end_layout

\begin_layout LyX-Code
-----> Rails app detected
\end_layout

\begin_layout LyX-Code
-----> WARNING: Detected Rails is not declared in either .gems or Gemfile
\end_layout

\begin_layout LyX-Code
Scheduling the install of Rails 2.3.10.
\end_layout

\begin_layout LyX-Code
See http://docs.heroku.com/gems for details on specifying gems.
\end_layout

\begin_layout LyX-Code
-----> Installing gem rails 2.3.10 from http://rubygems.org
\end_layout

\begin_layout LyX-Code
Successfully installed activesupport-2.3.10
\end_layout

\begin_layout LyX-Code
Successfully installed activerecord-2.3.10
\end_layout

\begin_layout LyX-Code
Successfully installed rack-1.1.0
\end_layout

\begin_layout LyX-Code
Successfully installed actionpack-2.3.10
\end_layout

\begin_layout LyX-Code
Successfully installed actionmailer-2.3.10
\end_layout

\begin_layout LyX-Code
Successfully installed activeresource-2.3.10
\end_layout

\begin_layout LyX-Code
Successfully installed rails-2.3.10
\end_layout

\begin_layout LyX-Code
7 gems installed
\end_layout

\begin_layout LyX-Code
Compiled slug size is 7.8MB
\end_layout

\begin_layout LyX-Code
-----> Launching...
 done
\end_layout

\begin_layout LyX-Code
http://mymusiccollection.heroku.com deployed to Heroku
\end_layout

\begin_layout LyX-Code
To git@heroku.com:mymusiccollection.git
\end_layout

\begin_layout LyX-Code
* [new branch] master -> master
\end_layout

\begin_layout Subsubsection
Managing gems on heroku
\end_layout

\begin_layout Subsubsection
Manage Postgresql database local and on Heroku
\end_layout

\begin_layout Section
Pick Authentication methodology
\end_layout

\begin_layout Subsection
plataformatec/devise
\end_layout

\begin_layout LyX-Code
https://github.com/plataformatec/devise
\end_layout

\begin_layout Standard
Devise is a flexible authentication solution for Rails based on Warden.
 It:
\end_layout

\begin_layout Itemize
Is Rack based;
\end_layout

\begin_layout Itemize
Is a complete MVC solution based on Rails engines;
\end_layout

\begin_layout Itemize
Allows you to have multiple roles (or models/scopes) signed in at the same
 time;
\end_layout

\begin_layout Itemize
Is based on a modularity concept: use just what you really need.
\end_layout

\begin_layout Subsection
OmniAuth: Standardized Multi-Provider Authentication
\end_layout

\begin_layout LyX-Code
https://github.com/intridea/omniauth
\end_layout

\begin_layout Standard
OmniAuth is a new Rack-based authentication system for multi-provider external
 authentcation.
 OmniAuth is built from the ground up on the philosophy that authentication
 is not the same as identity, and is based on two observations:
\end_layout

\begin_layout Enumerate
The traditional 'sign up using a login and password' model is becoming the
 exception, not the rule.
 Modern web applications offer external authentication via OpenID, Facebook,
 and/or OAuth.
\end_layout

\begin_layout Enumerate
The interconnectable web is no longer a dream, it is a necessity.
 It is not unreasonable to expect that one application may need to be able
 to connect to one, three, or twelve other services.
 Modern authentication systems should allow a user's identity to be associated
 with many authentications.
\end_layout

\begin_layout Subsubsection
Railscasts - OmniAuth Part 1
\end_layout

\begin_layout LyX-Code
http://railscasts.com/episodes/235-omniauth-part-1
\end_layout

\begin_layout LyX-Code
http://asciicasts.com/episodes/235-omniauth-part-1
\end_layout

\begin_layout Standard
OmniAuth Part 1 - OmniAuth is an easy way to add many different authentication
 services to your app.
 In this episode we start integrating it with Devise.
\end_layout

\begin_layout Subsubsection
OmniAuth for external authentication with rails
\end_layout

\begin_layout LyX-Code
http://www.qed42.com/blog/omniauth-external-authentication-rails
\end_layout

\begin_layout Standard
Omniauth doesn't handle your session, it mainly focuses on bringing you
 the required data from the provider and its upto you to manage the session.
 You can use any authentication system in rails to do that e.g devise, restful_au
thentication, authlogic etc.
 OmniAuth is the best solution for seamless integration of multiple authenticati
on providers.
\end_layout

\begin_layout Subsubsection
Authlogic vs Devise for Authentication in Rails
\end_layout

\begin_layout LyX-Code
http://ionrails.com/2010/11/10/authlogic-vs-devise-rails-authentication/
\end_layout

\begin_layout Standard
These last three points were the deal-breaker for me.
 I prefer Authlogic.
 I’m going to delete my Devise branch.
\end_layout

\begin_layout Subsubsection
Devise, Authlogic, & Restful Authorization - Posted by Ralph Shnelvar (ralphshne
lvar)
\end_layout

\begin_layout LyX-Code
http://www.ruby-forum.com/topic/201930#879210
\end_layout

\begin_layout Standard
My application needed/needs the ability to authenticate a login via email.
 
\end_layout

\begin_layout Standard
It takes some doing to get it all installed.
 Nonetheless, I recommend Devise.
 
\end_layout

\begin_layout Standard
Caution: I'm a newbie to RoR so take my recommendation with a brick of salt.
\end_layout

\begin_layout Subsubsection
OmniAuth and devise
\end_layout

\begin_layout Paragraph
Devise 1.2 supports integration with OmniAuth.
 
\end_layout

\begin_layout Standard
This wiki page will cover the basics to have this integration working using
 an OAuth provider as example.
\end_layout

\begin_layout LyX-Code
https://github.com/plataformatec/devise/wiki/OmniAuth%3a-Overview
\end_layout

\begin_layout Subsubsection
OmniAuth and authlogic
\end_layout

\begin_layout Subsection
Janrain Engage (formerly RPX)
\end_layout

\begin_layout LyX-Code
http://www.janrain.com/products/engage
\end_layout

\begin_layout Subsubsection
Implementing RPX with clearance in Ruby on rails in 5 minutes
\end_layout

\begin_layout Subsection
Clearance - Rails authentication with email & password.
\end_layout

\begin_layout LyX-Code
https://github.com/thoughtbot/clearance
\end_layout

\begin_layout LyX-Code
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/thoughtbot/clearance
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
rpx_now
\end_layout

\begin_layout LyX-Code
https://github.com/grosser/rpx_now
\end_layout

\begin_layout LyX-Code
https://github.com/thoughtbot/clearance
\end_layout

\begin_layout Subsection
authlogic-connect
\end_layout

\begin_layout LyX-Code
https://github.com/viatropos/authlogic-connect
\end_layout

\begin_layout Subsection
Devise
\end_layout

\begin_layout Subsubsection
209: Introducing Devise
\end_layout

\begin_layout LyX-Code
http://asciicasts.com/episodes/209-introducing-devise
\end_layout

\begin_layout Standard
We’ve covered several authentication solutions over the course of these
 episodes and today we’re going to show you another.
 This one is called “devise” and has been gaining in popularity recently.
 Devise is based on Warden, a Rack-based authentication solution, and uses
 it under the bonnet.
 You won’t need to know anything about Warden to follow this episode though
 as we’re going to be dealing with devise directly.
\end_layout

\begin_layout Standard
Devise handles authentication across the entire stack.
 It you’re familiar with Authlogic which was covered back in episode 160
 [watch, read] you’ll know that it covers just the model layer.
 By comparison, devise is a Rails Engine and covers controllers and views
 as well.
 Devise is modular and currently consists of eleven modules, each of which
 provides a different aspect of authentication.
 For example one module, Rememberable, remembers the user’s authentication
 in a saved cookie while another, Recoverable, looks after resetting the
 user’s password and sending reset instructions.
 This approach makes it easy to choose which parts of the authentication
 you want to use in your applications.
\end_layout

\begin_layout Paragraph
Adding Authentication to an Application
\end_layout

\begin_layout Standard
Let’s take a look at what’s required to get devise working in an application.
 Below is a screenshot from a simple project management application, written
 in Rails 3.0 and we’re going to use devise to add a User model and some
 authentication to it.
\end_layout

\begin_layout Subsubsection
Rails Authentication with Devise and CanCan – Customizing Devise Controllers
\end_layout

\begin_layout LyX-Code
http://www.tonyamoyal.com/2010/07/28/rails-authentication-with-devise-and-cancan-c
ustomizing-devise-controllers/
\end_layout

\begin_layout Standard
I’m tired of spending loads of time creating user authentication systems
 with permissions or swimming against the current to customize what’s available.
 There’s great open source stuff out there but until now, I haven’t gotten
 the full package with really easy customization.
\end_layout

\begin_layout Standard
The Devise and CanCan combo for user authentication and permissions in Rails
 is my combo of choice.
\end_layout

\begin_layout Standard
With Devise and CanCan, you can create a customized authentication and registrat
ion process in 15 minutes, and spend another 15 minutes implementing roles
 and permissions.
\end_layout

\begin_layout Paragraph
CanCan
\end_layout

\begin_layout Standard
CanCan is a great gem for implementing model permissions.
 The main reasons I chose CanCan are:
\end_layout

\begin_layout Itemize
The code written to check permissions is very readable
\end_layout

\begin_layout Itemize
The code written to declare permissions is very concise and readable
\end_layout

\begin_layout Itemize
It keeps permission logic in a single location so it is not duplicated across
 controllers, views, etc.
\end_layout

\begin_layout Itemize
Aliasing actions (read = index and show) creates more concise and readable
 code
\end_layout

\begin_layout Standard
Ryan Bates has a great screen cast on using CanCan here, but I do not recommend
 using his roles mask method (mentioned in the screen cast).
 It certainly works but it’s bad database design and you will feel the pain
 later.
\end_layout

\begin_layout Paragraph
Authorization with CanCan - Railscast
\end_layout

\begin_layout LyX-Code
http://railscasts.com/episodes/192-authorization-with-cancan
\end_layout

\begin_layout LyX-Code
http://asciicasts.com/episodes/192-authorization-with-cancan
\end_layout

\begin_layout Standard
CanCan is a simple authorization plugin that offers a lot of flexibility.
 See how to use it in this episode.
\end_layout

\begin_layout Section
How to access Discogs.com
\end_layout

\begin_layout LyX-Code
https://www.discogs.com/users/api_key
\end_layout

\begin_layout LyX-Code
API Key: c1c946026c
\end_layout

\begin_layout LyX-Code
Name: MyMusicCollectionDiscogsKey
\end_layout

\begin_layout Subsection
A Ruby wrapper for the Discogs.com API
\end_layout

\begin_layout LyX-Code
http://andrewbuntine.com/articles/2009/7/5/a-ruby-wrapper-for-the-discogscom-api
\end_layout

\begin_layout LyX-Code
https://github.com/buntine/discogs
\end_layout

\begin_layout Standard
A 100% Ruby wrapper of the Discogs.com API.
 No dependencies, no extra gems.
 :) Discogs::Wrapper abstracts all the nasty boilerplate code needed to
 interact with the Discogs API.
 It gives you direct access to the information you need.
\end_layout

\begin_layout Subsubsection
Help / Forums / API / Ruby wrapper for the API v1.0
\end_layout

\begin_layout LyX-Code
http://www.discogs.com/help/forums/topic/191673
\end_layout

\begin_layout Section
Other example Rails apps
\end_layout

\begin_layout Subsection
Ruby: Blooger 
\end_layout

\begin_layout LyX-Code
http://jjinux.blogspot.com/2010/08/ruby-blooger.html
\end_layout

\begin_layout Standard
I needed some sample code for an interview, so I built a website called
 Blooger.
 It's a site (like Blogger) where people can go create a blog to blog about
 their booger stories.
 It even has functioning Atom feeds :)
\end_layout

\begin_layout Standard
Here's the source code.
 I used Cucumber, RSpec, Webrat, and factory_girl to do behavior driven
 development.
 I used Authlogic for authentication.
 I used BlueCloth for Markdown support in order to format the blog posts.
 The README in the source has more details.
 
\end_layout

\begin_layout Section
Selected Software
\end_layout

\begin_layout Subsection
Authentication / Roles
\end_layout

\begin_layout Itemize
Devise
\end_layout

\begin_layout Itemize
CanCan
\end_layout

\begin_layout Itemize
OmniAuth
\end_layout

\begin_layout Subsection
Discogs.com Access
\end_layout

\begin_layout Section
Research Devise / CanCan / OmniAuth
\end_layout

\begin_layout Section
Research Andrew Buntine Discogs Library
\end_layout

\begin_layout Paragraph
Github Repository
\end_layout

\begin_layout LyX-Code
https://github.com/buntine/discogs
\end_layout

\begin_layout LyX-Code
git://github.com/buntine/discogs.git
\end_layout

\begin_layout LyX-Code
https://github.com/buntine/discogs/wiki
\end_layout

\begin_layout Paragraph
Andrew Buntine's Blog entry
\end_layout

\begin_layout LyX-Code
http://andrewbuntine.com/articles/2009/7/5/a-ruby-wrapper-for-the-discogscom-api
\end_layout

\end_body
\end_document
